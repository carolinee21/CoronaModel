CoronaModel, NETS 150 Final Project
JJ Kampf and Caroline Evans 

Our project used social networks to model the spread of COVID-19 by simulating life on campus during the pandemic. We used Swift to build
a mobile application that can be run in the XCode simulator or on any mobile device (App Store pending lol). Our goal was to model the
effects of social distancing and population sizes on the spread of the virus, specifically in R0 - one of the most crucial statistics in
infectious disease analysis. R0 describes the rate of transmission with a figure denoting the average number of people infected by a 
single sick person. 

We found it very cool to be able to apply the theory of social networks to a pressing contemporary issue - how do we show the key effects
of social distancing and help our friends make responsible decisions when it comes to protecting our collective safety? Our simulator was
able to address this. Further, we used real-data on mortality rated from Philadelphia to simulate recovery times and the probability of 
death from COVID. 

The work breakdown was distributed pretty evenly - we collaborated heavily to come up with the idea of the project and spent several hours
discussing the best way to implement this, both visually and logically. The iOS code was written by both of us - we collaborated to solve 
different parts of the program. As the resident Swift master, Caroline set up the MapView and Sprite nodes that moved throughout the 
screen. She also cleaned up a lot of the views to make them look better by adding UI constraints and adding a "start over" button. JJ 
wrote code that coordinated the segues between the launch screen and took user input, funneling these parameters to the main program. JJ 
also implemented the base countdown timer while Caroline applied this code to our specific needs in our application. JJ worked on the demo
video. Overall it was a very collaborative effort and we learned a ton. 

One challenge we faced was dealing with collisions between nodes and deciding how to deal with recovery times vs. fatalities. For the 
former, we started out by using MapAnnotation objects that floated around the screen - when their latitudinal and longitudinal coordinates
became too close, COVID was transmitted with some probability function based on real data that we found. However, we quickly realized that
this was an inefficient solution - the number of pairwise comparisons grew quadratically with the number of annotations on the screen, and 
it was tough to keep all of the annotations in "bounds". We adapted by using Apple's SpriteKit library to model the screen as a sort of 
"game" with sprites that can collide and a screen that serves as a bounding box for the sprites. 

Finally, to deal with recovery and fatalities, we added timers to all of the nodes. When a node becomes infected, its timer begins begins 
and it has a duration set randomly in a certain range. If the duration is sufficiently large, that node will die - we based the fatalities 
off of the true mortality rates of Philadelphia, which is around 6%. 

We really enjoyed this project - we hope you enjoy it as well!
